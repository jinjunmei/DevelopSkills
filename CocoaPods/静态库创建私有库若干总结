 
 
    静态库，包括.a和.h等文件，在创建私有库时，podspec文件的格式和普通库稍有不同。

    首先，引入.a文件，格式为 s.vendored_libraries = 'xx/xx/*.a'，,无论本地寻找路径怎么写， .a文件一定要保证能找得到，
如多有多个.a文件，类似这样s.vendored_libraries = 'xx/xx/*.a'，'xx/yy/*.a'，这样会创建一个叫'Frameworks'的子目录，其内放有此.a文件。   
而且最好加上 s.preserve_paths = 'xx/xx/libkernel.a'这样类似的语句，因为：
    By default, CocoaPods removes all files that are not matched by any of the other file pattern.
    
    其次，加上source_files,如sss.source_files = 'xx/xx/Headers/*.h',如有需要，可以以 , 隔开，添加多个路径，类似.a文件的引入方式。
    
    如果需要依赖系统库，这样添加 s.frameworks = 'UIKit','Foundation','SystemConfiguration','CoreText','QuartzCore','CoreGraphics'
    在实际操作过程中，往往使用subspec的方式，如
    
    s.subspec 'Kernel' do |ss|
     ss.vendored_libraries = 'DDReaderKernel/Kernel/*.a'

     ss.subspec 'Headers' do |sss|
        sss.source_files = 'DDReaderKernel/Kernel/Headers/*.h'
     end
    end
    
    在此例中，'Kernel'作为一个subspec，其本身又包括一个名为'Headers'的subspec，这样做的好处在于：
    
    一，'Kernel'本身可以作为一个单独的库使用，假如整个私有库名为DDReaderKernel，那么别人可以用DDReaderKernel/Kernel的方式引用整个子模块；
    
    二，在'Kernel'内部之所以创建一个名为'Headers'的subspec，是为了在引用时可以让'Headers'作为一个文件夹，里面包含各种需要的头文件，否则，这些
    头文件将直接在'Kernel'文件夹下一一陈列，看上去稍显凌乱。
    
    另外，一般建私有库时会有demo工程，此工程如果编译不通过，提示.a中的符号函数在arm64或arm7等指令集下找不到，一般是由Other Linker Flags引起的，
如果此时这个选项是"$(inherited)",把这个选项写成空;否则用-ObjC等标识试一试。
    
    如果是把创建好的私有库引入到其他工程，而此工程之前通过framework的方式引入过此静态库，此时需要删除已引入的静态库，然后使用pod引入，此时往往会
出现编译问题，一般都是提示.a文件找不到，这时需要查看Library Search Paths,如果此选项里含有旧的引入路径，删之。
cocoaPods会中自动创建配置文件（Pods-xxx.debug.xcconfig）来引入此文件，无需手动添加。
    
